/**
 * ESET Enterprise Inspector
 * ESET Enterprise Inspector REST API definition
 *
 * The version of the OpenAPI document: 1.6-oas3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IsolateResponse from '../model/IsolateResponse';
import UnauthorizedError from '../model/UnauthorizedError';

/**
* Computers service.
* @module api/ComputersApi
* @version 1.6-oas3
*/
export default class ComputersApi {

    /**
    * Constructs a new ComputersApi. 
    * @alias module:api/ComputersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrateComputer operation.
     * @callback module:api/ComputersApi~integrateComputerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsolateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Integrate a computer back into the network
     * @param {String} computerId Computer ID or UUID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.idType if $idType=uuid {id} in URL is interpreted as uuid
     * @param {module:api/ComputersApi~integrateComputerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsolateResponse}
     */
    integrateComputer(computerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'computerId' is set
      if (computerId === undefined || computerId === null) {
        throw new Error("Missing the required parameter 'computerId' when calling integrateComputer");
      }

      let pathParams = {
        'computerId': computerId
      };
      let queryParams = {
        '$idType': opts['idType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IsolateResponse;
      return this.apiClient.callApi(
        '/api/v1/machines/{computerId}/integrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isolateComputer operation.
     * @callback module:api/ComputersApi~isolateComputerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsolateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Isolate a computer from the network
     * @param {String} computerId Computer ID or UUID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.idType if $idType=uuid {id} in URL is interpreted as uuid
     * @param {module:api/ComputersApi~isolateComputerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsolateResponse}
     */
    isolateComputer(computerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'computerId' is set
      if (computerId === undefined || computerId === null) {
        throw new Error("Missing the required parameter 'computerId' when calling isolateComputer");
      }

      let pathParams = {
        'computerId': computerId
      };
      let queryParams = {
        '$idType': opts['idType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IsolateResponse;
      return this.apiClient.callApi(
        '/api/v1/machines/{computerId}/isolate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
