"""
    ESET Enterprise Inspector

    ESET Enterprise Inspector REST API definition  # noqa: E501

    The version of the OpenAPI document: 1.6-oas3
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.detection_details_response import DetectionDetailsResponse
from openapi_client.model.detection_list_response import DetectionListResponse
from openapi_client.model.detection_update_request import DetectionUpdateRequest
from openapi_client.model.unauthorized_error import UnauthorizedError


class DetectionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_detection_details(
            self,
            id,
            **kwargs
        ):
            """Get detection details  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_detection_details(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): ID or UUID

            Keyword Args:
                id_type (str): if $idType=uuid {id} in URL is interpreted as uuid. [optional] if omitted the server will use the default value of "uuid"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DetectionDetailsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_detection_details = _Endpoint(
            settings={
                'response_type': (DetectionDetailsResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/v1/detections/{id}',
                'operation_id': 'get_detection_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_type',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'id_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('id_type',): {

                        "UUID": "uuid"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_type':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_type': '$idType',
                },
                'location_map': {
                    'id': 'path',
                    'id_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_detection_details
        )

        def __list_detections(
            self,
            **kwargs
        ):
            """List of detections  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_detections(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                top (int): system query option requests the number of items in the queried collection to be included in the result. [optional]
                skip (int): system query option requests the number of items in the queried collection that are to be skipped and not included in the result. [optional]
                count (int): system query option allows clients to request a count of the matching resources included with the resources in the response. if set to $count=1, the number of detections is returned.. [optional]
                order_by (str): system query option allows clients to request resources in either ascending order using asc or descending order using desc. If not specified the order is in ascending way. [optional]
                filter (str): system query option allows clients to filter a collection of resources that are addressed by a request URL. The query supports the following operators eq, ne, gt, ge, lt, le, and, or, and (). Operators can be combined with values to filter data. For instance, “resolved eq 0” will report only unresolved detections.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DetectionListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_detections = _Endpoint(
            settings={
                'response_type': (DetectionListResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/v1/detections',
                'operation_id': 'list_detections',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'top',
                    'skip',
                    'count',
                    'order_by',
                    'filter',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'count',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('count',): {

                        "0": 0,
                        "1": 1
                    },
                },
                'openapi_types': {
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (int,),
                    'order_by':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                    'order_by': '$orderBy',
                    'filter': '$filter',
                },
                'location_map': {
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                    'order_by': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_detections
        )

        def __update_detection(
            self,
            id,
            detection_update_request,
            **kwargs
        ):
            """Update detection  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_detection(id, detection_update_request, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): ID or UUID
                detection_update_request (DetectionUpdateRequest):

            Keyword Args:
                id_type (str): if $idType=uuid {id} in URL is interpreted as uuid. [optional] if omitted the server will use the default value of "uuid"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['detection_update_request'] = \
                detection_update_request
            return self.call_with_http_info(**kwargs)

        self.update_detection = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/api/v1/detections/{id}',
                'operation_id': 'update_detection',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'detection_update_request',
                    'id_type',
                ],
                'required': [
                    'id',
                    'detection_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'id_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('id_type',): {

                        "UUID": "uuid"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'detection_update_request':
                        (DetectionUpdateRequest,),
                    'id_type':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_type': '$idType',
                },
                'location_map': {
                    'id': 'path',
                    'detection_update_request': 'body',
                    'id_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_detection
        )
