#
# ESET Enterprise Inspector
# ESET Enterprise Inspector REST API definition
# Version: 1.6-oas3
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.
.PARAMETER Category
No description available.
.PARAMETER Explanation
No description available.
.PARAMETER Os
No description available.
.PARAMETER Mitreattackid
No description available.
.PARAMETER MaliciousCauses
No description available.
.PARAMETER BenignCauses
No description available.
.PARAMETER RecommendedActions
No description available.
.OUTPUTS

RuleCreateRequestDescription<PSCustomObject>
#>

function Initialize-RuleCreateRequestDescription {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Explanation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Windows", "OSX", "ANY")]
        [String]
        ${Os},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mitreattackid},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MaliciousCauses},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BenignCauses},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecommendedActions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RuleCreateRequestDescription' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "category" = ${Category}
            "explanation" = ${Explanation}
            "os" = ${Os}
            "mitreattackid" = ${Mitreattackid}
            "maliciousCauses" = ${MaliciousCauses}
            "benignCauses" = ${BenignCauses}
            "recommendedActions" = ${RecommendedActions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RuleCreateRequestDescription<PSCustomObject>

.DESCRIPTION

Convert from JSON to RuleCreateRequestDescription<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RuleCreateRequestDescription<PSCustomObject>
#>
function ConvertFrom-JsonToRuleCreateRequestDescription {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RuleCreateRequestDescription' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RuleCreateRequestDescription
        $AllProperties = ("name", "category", "explanation", "os", "mitreattackid", "maliciousCauses", "benignCauses", "recommendedActions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "explanation"))) { #optional property not found
            $Explanation = $null
        } else {
            $Explanation = $JsonParameters.PSobject.Properties["explanation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "os"))) { #optional property not found
            $Os = $null
        } else {
            $Os = $JsonParameters.PSobject.Properties["os"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mitreattackid"))) { #optional property not found
            $Mitreattackid = $null
        } else {
            $Mitreattackid = $JsonParameters.PSobject.Properties["mitreattackid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maliciousCauses"))) { #optional property not found
            $MaliciousCauses = $null
        } else {
            $MaliciousCauses = $JsonParameters.PSobject.Properties["maliciousCauses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "benignCauses"))) { #optional property not found
            $BenignCauses = $null
        } else {
            $BenignCauses = $JsonParameters.PSobject.Properties["benignCauses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendedActions"))) { #optional property not found
            $RecommendedActions = $null
        } else {
            $RecommendedActions = $JsonParameters.PSobject.Properties["recommendedActions"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "category" = ${Category}
            "explanation" = ${Explanation}
            "os" = ${Os}
            "mitreattackid" = ${Mitreattackid}
            "maliciousCauses" = ${MaliciousCauses}
            "benignCauses" = ${BenignCauses}
            "recommendedActions" = ${RecommendedActions}
        }

        return $PSO
    }

}

