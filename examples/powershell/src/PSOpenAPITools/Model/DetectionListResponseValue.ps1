#
# ESET Enterprise Inspector
# ESET Enterprise Inspector REST API definition
# Version: 1.6-oas3
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ComputerId
No description available.
.PARAMETER ComputerName
No description available.
.PARAMETER ComputerUuid
No description available.
.PARAMETER CreationTime
No description available.
.PARAMETER Id
No description available.
.PARAMETER ModuleId
No description available.
.PARAMETER ModuleLgAge
No description available.
.PARAMETER ModuleLgPopularity
No description available.
.PARAMETER ModuleLgReputation
No description available.
.PARAMETER ModuleName
No description available.
.PARAMETER ModuleSha1
No description available.
.PARAMETER ModuleSignatureType
No description available.
.PARAMETER ModuleSigner
No description available.
.PARAMETER Note
No description available.
.PARAMETER Priority
No description available.
.PARAMETER ProcessCommandLine
No description available.
.PARAMETER ProcessId
No description available.
.PARAMETER ProcessUser
No description available.
.PARAMETER Resolved
No description available.
.PARAMETER RuleId
No description available.
.PARAMETER RuleName
No description available.
.PARAMETER RuleUuid
No description available.
.PARAMETER Severity
No description available.
.PARAMETER SeverityScore
No description available.
.PARAMETER ThreatName
No description available.
.PARAMETER ThreatUri
No description available.
.PARAMETER Type
No description available.
.PARAMETER Uuid
No description available.
.OUTPUTS

DetectionListResponseValue<PSCustomObject>
#>

function Initialize-DetectionListResponseValue {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ComputerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComputerName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComputerUuid},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreationTime},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ModuleId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ModuleLgAge},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ModuleLgPopularity},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ModuleLgReputation},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleSha1},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("60", "70", "75", "80", "90")]
        [System.Nullable[Int32]]
        ${ModuleSignatureType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleSigner},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Priority},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProcessCommandLine},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProcessId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProcessUser},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resolved},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RuleId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleName},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleUuid},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Severity},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SeverityScore},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ThreatName},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ThreatUri},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Type},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DetectionListResponseValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ModuleLgReputation -and $ModuleLgReputation -gt 9) {
          throw "invalid value for 'ModuleLgReputation', must be smaller than or equal to 9."
        }

        if ($ModuleLgReputation -and $ModuleLgReputation -lt 1) {
          throw "invalid value for 'ModuleLgReputation', must be greater than or equal to 1."
        }

        if ($Priority -and $Priority -gt 3) {
          throw "invalid value for 'Priority', must be smaller than or equal to 3."
        }

        if ($Severity -and $Severity -gt 3) {
          throw "invalid value for 'Severity', must be smaller than or equal to 3."
        }

        if ($Severity -and $Severity -lt 1) {
          throw "invalid value for 'Severity', must be greater than or equal to 1."
        }

        if ($SeverityScore -and $SeverityScore -gt 100) {
          throw "invalid value for 'SeverityScore', must be smaller than or equal to 100."
        }

        if ($Type -and $Type -gt 8) {
          throw "invalid value for 'Type', must be smaller than or equal to 8."
        }


        $PSO = [PSCustomObject]@{
            "computerId" = ${ComputerId}
            "computerName" = ${ComputerName}
            "computerUuid" = ${ComputerUuid}
            "creationTime" = ${CreationTime}
            "id" = ${Id}
            "moduleId" = ${ModuleId}
            "moduleLgAge" = ${ModuleLgAge}
            "moduleLgPopularity" = ${ModuleLgPopularity}
            "moduleLgReputation" = ${ModuleLgReputation}
            "moduleName" = ${ModuleName}
            "moduleSha1" = ${ModuleSha1}
            "moduleSignatureType" = ${ModuleSignatureType}
            "moduleSigner" = ${ModuleSigner}
            "note" = ${Note}
            "priority" = ${Priority}
            "processCommandLine" = ${ProcessCommandLine}
            "processId" = ${ProcessId}
            "processUser" = ${ProcessUser}
            "resolved" = ${Resolved}
            "ruleId" = ${RuleId}
            "ruleName" = ${RuleName}
            "ruleUuid" = ${RuleUuid}
            "severity" = ${Severity}
            "severityScore" = ${SeverityScore}
            "threatName" = ${ThreatName}
            "threatUri" = ${ThreatUri}
            "type" = ${Type}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DetectionListResponseValue<PSCustomObject>

.DESCRIPTION

Convert from JSON to DetectionListResponseValue<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DetectionListResponseValue<PSCustomObject>
#>
function ConvertFrom-JsonToDetectionListResponseValue {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DetectionListResponseValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DetectionListResponseValue
        $AllProperties = ("computerId", "computerName", "computerUuid", "creationTime", "id", "moduleId", "moduleLgAge", "moduleLgPopularity", "moduleLgReputation", "moduleName", "moduleSha1", "moduleSignatureType", "moduleSigner", "note", "priority", "processCommandLine", "processId", "processUser", "resolved", "ruleId", "ruleName", "ruleUuid", "severity", "severityScore", "threatName", "threatUri", "type", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computerId"))) { #optional property not found
            $ComputerId = $null
        } else {
            $ComputerId = $JsonParameters.PSobject.Properties["computerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computerName"))) { #optional property not found
            $ComputerName = $null
        } else {
            $ComputerName = $JsonParameters.PSobject.Properties["computerName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "computerUuid"))) { #optional property not found
            $ComputerUuid = $null
        } else {
            $ComputerUuid = $JsonParameters.PSobject.Properties["computerUuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creationTime"))) { #optional property not found
            $CreationTime = $null
        } else {
            $CreationTime = $JsonParameters.PSobject.Properties["creationTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleId"))) { #optional property not found
            $ModuleId = $null
        } else {
            $ModuleId = $JsonParameters.PSobject.Properties["moduleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleLgAge"))) { #optional property not found
            $ModuleLgAge = $null
        } else {
            $ModuleLgAge = $JsonParameters.PSobject.Properties["moduleLgAge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleLgPopularity"))) { #optional property not found
            $ModuleLgPopularity = $null
        } else {
            $ModuleLgPopularity = $JsonParameters.PSobject.Properties["moduleLgPopularity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleLgReputation"))) { #optional property not found
            $ModuleLgReputation = $null
        } else {
            $ModuleLgReputation = $JsonParameters.PSobject.Properties["moduleLgReputation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleName"))) { #optional property not found
            $ModuleName = $null
        } else {
            $ModuleName = $JsonParameters.PSobject.Properties["moduleName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleSha1"))) { #optional property not found
            $ModuleSha1 = $null
        } else {
            $ModuleSha1 = $JsonParameters.PSobject.Properties["moduleSha1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleSignatureType"))) { #optional property not found
            $ModuleSignatureType = $null
        } else {
            $ModuleSignatureType = $JsonParameters.PSobject.Properties["moduleSignatureType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleSigner"))) { #optional property not found
            $ModuleSigner = $null
        } else {
            $ModuleSigner = $JsonParameters.PSobject.Properties["moduleSigner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) { #optional property not found
            $Note = $null
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "processCommandLine"))) { #optional property not found
            $ProcessCommandLine = $null
        } else {
            $ProcessCommandLine = $JsonParameters.PSobject.Properties["processCommandLine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "processId"))) { #optional property not found
            $ProcessId = $null
        } else {
            $ProcessId = $JsonParameters.PSobject.Properties["processId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "processUser"))) { #optional property not found
            $ProcessUser = $null
        } else {
            $ProcessUser = $JsonParameters.PSobject.Properties["processUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolved"))) { #optional property not found
            $Resolved = $null
        } else {
            $Resolved = $JsonParameters.PSobject.Properties["resolved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleId"))) { #optional property not found
            $RuleId = $null
        } else {
            $RuleId = $JsonParameters.PSobject.Properties["ruleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleName"))) { #optional property not found
            $RuleName = $null
        } else {
            $RuleName = $JsonParameters.PSobject.Properties["ruleName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleUuid"))) { #optional property not found
            $RuleUuid = $null
        } else {
            $RuleUuid = $JsonParameters.PSobject.Properties["ruleUuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severityScore"))) { #optional property not found
            $SeverityScore = $null
        } else {
            $SeverityScore = $JsonParameters.PSobject.Properties["severityScore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threatName"))) { #optional property not found
            $ThreatName = $null
        } else {
            $ThreatName = $JsonParameters.PSobject.Properties["threatName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threatUri"))) { #optional property not found
            $ThreatUri = $null
        } else {
            $ThreatUri = $JsonParameters.PSobject.Properties["threatUri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "computerId" = ${ComputerId}
            "computerName" = ${ComputerName}
            "computerUuid" = ${ComputerUuid}
            "creationTime" = ${CreationTime}
            "id" = ${Id}
            "moduleId" = ${ModuleId}
            "moduleLgAge" = ${ModuleLgAge}
            "moduleLgPopularity" = ${ModuleLgPopularity}
            "moduleLgReputation" = ${ModuleLgReputation}
            "moduleName" = ${ModuleName}
            "moduleSha1" = ${ModuleSha1}
            "moduleSignatureType" = ${ModuleSignatureType}
            "moduleSigner" = ${ModuleSigner}
            "note" = ${Note}
            "priority" = ${Priority}
            "processCommandLine" = ${ProcessCommandLine}
            "processId" = ${ProcessId}
            "processUser" = ${ProcessUser}
            "resolved" = ${Resolved}
            "ruleId" = ${RuleId}
            "ruleName" = ${RuleName}
            "ruleUuid" = ${RuleUuid}
            "severity" = ${Severity}
            "severityScore" = ${SeverityScore}
            "threatName" = ${ThreatName}
            "threatUri" = ${ThreatUri}
            "type" = ${Type}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

