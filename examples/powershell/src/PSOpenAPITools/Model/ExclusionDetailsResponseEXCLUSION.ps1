#
# ESET Enterprise Inspector
# ESET Enterprise Inspector REST API definition
# Version: 1.6-oas3
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Body
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Note
No description available.
.PARAMETER RuleIds
No description available.
.PARAMETER RuleUuids
No description available.
.PARAMETER Uuid
No description available.
.OUTPUTS

ExclusionDetailsResponseEXCLUSION<PSCustomObject>
#>

function Initialize-ExclusionDetailsResponseEXCLUSION {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${RuleIds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RuleUuids},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExclusionDetailsResponseEXCLUSION' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "body" = ${Body}
            "enabled" = ${Enabled}
            "id" = ${Id}
            "name" = ${Name}
            "note" = ${Note}
            "ruleIds" = ${RuleIds}
            "ruleUuids" = ${RuleUuids}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExclusionDetailsResponseEXCLUSION<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExclusionDetailsResponseEXCLUSION<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExclusionDetailsResponseEXCLUSION<PSCustomObject>
#>
function ConvertFrom-JsonToExclusionDetailsResponseEXCLUSION {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExclusionDetailsResponseEXCLUSION' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExclusionDetailsResponseEXCLUSION
        $AllProperties = ("body", "enabled", "id", "name", "note", "ruleIds", "ruleUuids", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) { #optional property not found
            $Note = $null
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleIds"))) { #optional property not found
            $RuleIds = $null
        } else {
            $RuleIds = $JsonParameters.PSobject.Properties["ruleIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleUuids"))) { #optional property not found
            $RuleUuids = $null
        } else {
            $RuleUuids = $JsonParameters.PSobject.Properties["ruleUuids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "body" = ${Body}
            "enabled" = ${Enabled}
            "id" = ${Id}
            "name" = ${Name}
            "note" = ${Note}
            "ruleIds" = ${RuleIds}
            "ruleUuids" = ${RuleUuids}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

