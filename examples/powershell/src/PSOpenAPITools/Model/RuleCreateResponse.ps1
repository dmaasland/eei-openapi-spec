#
# ESET Enterprise Inspector
# ESET Enterprise Inspector REST API definition
# Version: 1.6-oas3
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Body
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Severity
No description available.
.PARAMETER SeverityScore
No description available.
.PARAMETER Uuid
No description available.
.OUTPUTS

RuleCreateResponse<PSCustomObject>
#>

function Initialize-RuleCreateResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "3")]
        [System.Nullable[Int32]]
        ${Severity},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SeverityScore},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RuleCreateResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($SeverityScore -and $SeverityScore -gt 100) {
          throw "invalid value for 'SeverityScore', must be smaller than or equal to 100."
        }


        $PSO = [PSCustomObject]@{
            "body" = ${Body}
            "enabled" = ${Enabled}
            "id" = ${Id}
            "name" = ${Name}
            "severity" = ${Severity}
            "severityScore" = ${SeverityScore}
            "uuid" = ${Uuid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RuleCreateResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to RuleCreateResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RuleCreateResponse<PSCustomObject>
#>
function ConvertFrom-JsonToRuleCreateResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RuleCreateResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RuleCreateResponse
        $AllProperties = ("body", "enabled", "id", "name", "severity", "severityScore", "uuid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) { #optional property not found
            $Severity = $null
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severityScore"))) { #optional property not found
            $SeverityScore = $null
        } else {
            $SeverityScore = $JsonParameters.PSobject.Properties["severityScore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        $PSO = [PSCustomObject]@{
            "body" = ${Body}
            "enabled" = ${Enabled}
            "id" = ${Id}
            "name" = ${Name}
            "severity" = ${Severity}
            "severityScore" = ${SeverityScore}
            "uuid" = ${Uuid}
        }

        return $PSO
    }

}

