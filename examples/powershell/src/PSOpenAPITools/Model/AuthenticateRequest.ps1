#
# ESET Enterprise Inspector
# ESET Enterprise Inspector REST API definition
# Version: 1.6-oas3
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Credentials to use for authentication. Set domain to ""true"" if this a domain user.

.PARAMETER Username
No description available.
.PARAMETER Password
No description available.
.PARAMETER Domain
No description available.
.OUTPUTS

AuthenticateRequest<PSCustomObject>
#>

function Initialize-AuthenticateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Domain}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AuthenticateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Username -eq $null) {
            throw "invalid value for 'Username', 'Username' cannot be null."
        }

        if ($Password -eq $null) {
            throw "invalid value for 'Password', 'Password' cannot be null."
        }

        if ($Domain -eq $null) {
            throw "invalid value for 'Domain', 'Domain' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "username" = ${Username}
            "password" = ${Password}
            "domain" = ${Domain}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuthenticateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuthenticateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuthenticateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToAuthenticateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AuthenticateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AuthenticateRequest
        $AllProperties = ("username", "password", "domain")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'username' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) {
            throw "Error! JSON cannot be serialized due to the required property 'username' missing."
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) {
            throw "Error! JSON cannot be serialized due to the required property 'password' missing."
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) {
            throw "Error! JSON cannot be serialized due to the required property 'domain' missing."
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        $PSO = [PSCustomObject]@{
            "username" = ${Username}
            "password" = ${Password}
            "domain" = ${Domain}
        }

        return $PSO
    }

}

